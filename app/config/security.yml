# To get started with security, check out the documentation:
# http://symfony.com/doc/current/book/security.html
security:
    encoders:
        AppBundle\Entity\User: bcrypt
        Symfony\Component\Security\Core\User\UserInterface: plaintext

    # role_hierarchy:
    #     ROLE_MANAGER:       ROLE_DEVELOPER
    
    # http://symfony.com/doc/current/book/security.html#where-do-users-come-from-user-providers
    providers:
        chain_provider:
            chain:
                providers: [database_users]
                #providers: [in_memory, database_users]
        database_users:
            entity: { class: AppBundle\Entity\User, property: username }
        # in_memory:
        #     memory:
        #         users:
        #             memoryuser:
        #                 password: 1memoryuser2
        #                 roles: 'ROLE_MANAGER'
            

    firewalls:
        secured_area:
            # this firewall applies to all URLs
            pattern: ^/
            # but the firewall does not require login on every page
            # denying access is done in access_control or in your controllers
            anonymous: true
            # This allows the user to login by submitting a username and password
            # Reference: http://symfony.com/doc/current/cookbook/security/form_login_setup.html
            form_login:
                # The route name that the login form submits to
                check_path: security_login_check
                # The name of the route where the login form lives
                # When the user tries to access a protected page, they are redirected here
                login_path: security_login_form
                # Secure the login form against CSRF
                # Reference: http://symfony.com/doc/current/cookbook/security/csrf_in_login_form.html
                csrf_token_generator: security.csrf.token_manager
                always_use_default_target_path: true
                default_target_path: /account/task/list
            logout:
                # The route name the user can go to in order to logout
                path: security_logout
                # The name of the route to redirect to after logging out
                target: /
            http_basic: ~
    access_control:
        # this is a catch-all for the admin area
        # additional security lives in the controllers
        - { path: ^/account, roles: [ROLE_MANAGER, ROLE_DEVELOPER] }
     
